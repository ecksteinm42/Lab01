sample <- rnorm(100, mean = 10, sd = 10)
mu_hat <- mean(sample)
CI <- c(
"lower" = mu_hat - 1.96,
"upper" = mu_hat + 1.96
)
?ifelse
# generate the dummy vector `dummy` using `ifelse()`
dummy <- ifelse(DF$X > 0, 1, 0)
# append `dummy` to `DF`
DF$dummy <- dummy
mu_Y_D1 <- mean(DF$Y[D==1])
mu_Y_D0 <- mean(DF$Y[D==0])
# regress `Y` on `D`
lm(Y ~ D, data = DF)
mu_Y_D1 <- mean(DF$Y[DF$D==1])
mu_Y_D0 <- mean(DF$Y[DF$D==0])
# regress `Y` on `D`
lm(Y ~ D, data = DF)
?data
library(AER)
data(CPS1985)
# perform the regression and assign the result to `dummy_mod`
dummy_mod <- lm(wage ~ gender, data = CPS1985)
View(dummy_mod)
?vcovHC
?coeftest
linearHypothesis?
?linearHypothesis
?linearHypothesis
coeftest(dummy_mod, vcov. = vcovHC, type = "HC0")
linearHypothesis(dummy_mod, "genderfemale=0", vcov. = vcovHC, type = "HC0")
?coeftest
?coeftest()
library(AER)
library(MASS)
?coeftest
4]
coeftest(mod, vcov. = vcovHC)[, 4]
tstats <- coefs/SEs
# compute p-values for all significance tests. Assign them to `pval`
pvals <- 2*(pnorm(-abs(tstats)))
# check whether the hypotheses are rejected at the 1% significance level
pvals < 0.01
pvals <- 2*(pnorm(-abs(tstats)))
tstats <- coefs/SEs
?pf
?confidenceEllipse
library(AER)
library(stargazer)
?I
LinearLog_model <- lm(score ~ log(income), data = CASchools)
coeftest(LinearLog_model, vcov = vcovHC, type = "HC1")
library(AER)
library(MASS)
library(stargazer)
LinearLog_model <- lm(score ~ log(income), data = CASchools)
coeftest(LinearLog_model, vcov = vcovHC, type = "HC1")
#devtools::install_github("slanglab/phrasemachine/R/phrasemachine")
library(phrasemachine)
phrases <- phrasemachine(documents,
minimum_ngram_length = 2,
maximum_ngram_length = 8,
return_phrase_vectors = TRUE,
return_tag_sequences = TRUE)
corp <- quanteda::corpus(quanteda::data_corpus_inaugural)
documents <- as.character(corp)[1:5]
print(names(documents))
phrases <- phrasemachine(documents,
minimum_ngram_length = 2,
maximum_ngram_length = 8,
return_phrase_vectors = TRUE,
return_tag_sequences = TRUE)
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
remDr <- rD[["client"]]
rD <- rsDriver(browser="chrome", chromever=NULL, port=8787L)   #Port number - any random number. Some won't work, e.g. 4040, but usually you can pick a random port that doesn't coincide with another local service
remDr <- rD[["client"]]
library(rvest)
library(tidyverse)
library(RSelenium)
rD <- rsDriver(browser="chrome", chromever=NULL, port=8787L)   #Port number - any random number. Some won't work, e.g. 4040, but usually you can pick a random port that doesn't coincide with another local service
remDr <- rD[["client"]]
rD <- rsDriver(browser="chrome", chromever=NULL)   #Port number - any random number. Some won't work, e.g. 4040, but usually you can pick a random port that doesn't coincide with another local service
remDr <- rD[["client"]]
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
rD <- rsDriver(browser="firefox", geckover="latest", port=8787L)   #Port number - any random number. Some won't work, e.g. 4040, but usually you can pick a random port that doesn't coincide with another local service
remDr <- rD[["client"]]
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
shell('docker pull selenium/standalone-firefox')
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
remDr$findElements("css", ".visitable")[[1]]$clickElement()
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
remDr$findElements("css", ".visitable")[[1]]$clickElement()
sys.sleep(5)
remDr$findElements("css", ".visitable")[[1]]$clickElement()
sys.sleep(5)
library(rvest)
sys.sleep(5)
tryCatch({
# Code for navigation and interaction
}, error = function(e) {
# Handle the error (e.g., print a message or take corrective action)
cat("Error:", e$message, "\n")
})
remDr$findElements("css", ".visitable")[[1]]$clickElement()
tryCatch({
# Find the element by CSS selector
element <- remDr$findElements("css", ".visitable")[[1]]
# Check if the element exists
if (!is.null(element)) {
# Click the element
element$clickElement()
cat("Element clicked successfully.\n")
} else {
cat("Element not found.\n")
}
}, error = function(e) {
# Handle any errors that occur during the process
cat("Error:", e$message, "\n")
})
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
shell('docker pull selenium/standalone-firefox')
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
rD <- rsDriver(browser = "firefox", port=4560L, verbose=F, chromever = NULL)
remDr <- rD[["client"]]')
rD <- rsDriver(browser = "firefox", port=8787L, verbose=F, chromever = NULL)
remDr <- rD[["client"]]')
rD <- rsDriver(browser = "firefox", port=8787L, verbose=F, chromever = NULL)
remDr <- rD[["client"]]')
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
library(rvest)
library(tidyverse)
library(RSelenium)
/
end
stop
''
rD <- rsDriver(browser = "firefox", port=8787L, verbose=F, chromever = NULL)
remDr <- rD[["client"]]
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
tryCatch({
# Find the element by CSS selector
element <- remDr$findElements("css", ".visitable")[[1]]
# Check if the element exists
if (!is.null(element)) {
# Click the element
element$clickElement()
cat("Element clicked successfully.\n")
} else {
cat("Element not found.\n")
}
}, error = function(e) {
# Handle any errors that occur during the process
cat("Error:", e$message, "\n")
})
Sys.sleep(5)
# Now we'll get the full HTML
html <- remDr$getPageSource()[[1]]  #nav
library(rvest)
library(tidyverse)
library(RSelenium)
rD <- rsDriver(browser = "firefox", port=8787L, verbose=F, chromever = NULL)
remDr <- rD[["client"]]
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
rD <- rsDriver(browser = "chrome", chromever = "117.0.5938.149")
remDr <- rD[["client"]]
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90")
#Running the above with my actual Chrome version, 117.0.5938.149, didn't work. So, I ran it again with the closest available version the error message IDed as available: 114.0.5735.90
remDr <- rD[["client"]]
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
#Running the above with my actual Chrome version, 117.0.5938.149, didn't work. So, I ran it again with the closest available version the error message IDed as available: 114.0.5735.90
#With the older, available version, I got "Could not determine server status."
#Running again with the port number restored and NOT logged in to Docker got
remDr <- rD[["client"]]
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
#Running the above with my actual Chrome version, 117.0.5938.149, didn't work. So, I ran it again with the closest available version the error message IDed as available: 114.0.5735.90
#With the older, available version, I got "Could not determine server status."
#Running again with the port number restored and NOT logged in to Docker in the background got a successful remote server connection (though no new Chrome window) and the following line returning NA
remDr <- rD[["client"]]
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
#Running the above with my actual Chrome version, 117.0.5938.149, didn't work. So, I ran it again with the closest available version the error message IDed as available: 114.0.5735.90
#With the older, available version, I got "Could not determine server status."
#Running again with the port number restored and NOT logged in to Docker in the background got a successful remote server connection (though no new Chrome window) and the following line returning NA. Temporarily allowing pop-ups in Chrome did not alter this outcome.
#Wait: when I did that on port 8787, I think I actually was logged in to Docker. Trying again with port as 8786
remDr <- rD[["client"]]
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8786L)
#Running the above with my actual Chrome version, 117.0.5938.149, didn't work. So, I ran it again with the closest available version the error message IDed as available: 114.0.5735.90
#With the older, available version, I got "Could not determine server status."
#Running again with the port number restored and NOT logged in to Docker in the background got a successful remote server connection (though no new Chrome window) and the following line returning NA. Temporarily allowing pop-ups in Chrome did not alter this outcome.
#Wait: when I did that on port 8787, I think I actually was logged in to Docker. Trying again with port as 8786 did not change th
remDr <- rD[["client"]]
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
#Running the above with my actual Chrome version, 117.0.5938.149, didn't work. So, I ran it again with the closest available version the error message IDed as available: 114.0.5735.90
#With the older, available version, I got "Could not determine server status."
#Running again with the port number restored and NOT logged in to Docker in the background got a successful remote server connection (though no new Chrome window) and the following line returning NA. Temporarily allowing pop-ups in Chrome did not alter this outcome.
#Wait: when I did that on port 8787, I think I actually was logged in to Docker. Trying again with port as 8786 instead of 8787 only resulted in a could not open chrome browser / failed to connect to localhost port.
remDr <- rD[["client"]]
remDr <- rD$client
remDr$navigate("https://www.courtlistener.com/?type=o&q=citizenship&type=o&order_by=dateFiled%20desc&stat_Precedential=on&court=scotus")
Sys.sleep(5)
# Now we'll get the full HTML
html <- remDr$getPageSource()[[1]]  #navigation to an element of the webpage?
#The element above gets the error "sub
library(rvest)
library(tidyverse)
url_biden <- "https://www.state.gov/press-releases/"
#Note that this one follows the format past the first page of https://www.state.gov/press-releases/page/2/
url_trump <- "https://2017-2021.state.gov/press-releases/"
#Same subsequent page format as Biden administration releases
url_cndocs <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3434_664924/index.html"
#Note: This one does index and then index_1; compare Hotel UMass reviews exercise
url_cnactivities <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3435_664926/"
#The subsequent page format for this one is, after the 664926, /index_1.html and so on
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
remDr <- rD$client
remDr$navigate("https://www.state.gov/press-releases/")
shell('docker pull selenium/standalone-firefox')
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
#And, as in tutorial, this gets NULL.
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
#And, as in tutorial, this gets NULL.
shell('docker pull selenium/standalone-firefox')
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
#And, as in tutorial, this gets NULL.
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
library(RSelenium)
rsDriver(remoteServerAddr = "localhost", port=8787L, browser=c("chrome"), version = "latest")
rsDriver(remoteServerAddr = "localhost", port=8787L, browser=("chrome"), version = "latest")
rsDriver(remoteServerAddr = "localhost", port=8787L, browser="chrome", version = "latest")
library(RSelenium)
library(rvest)
library(tidyverse)
url_biden <- "https://www.state.gov/press-releases/"
#Note that this one follows the format past the first page of https://www.state.gov/press-releases/page/2/
url_trump <- "https://2017-2021.state.gov/press-releases/"
#Same subsequent page format as Biden administration releases
url_cndocs <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3434_664924/index.html"
#Note: This one does index and then index_1; compare Hotel UMass reviews exercise
url_cnactivities <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3435_664926/"
#The subsequent page format for this one is, after the 664926, /index_1.html and so on
rsDriver(remoteServerAddr = "localhost", port=8787L, browser="chrome", version = "latest")
remDr$navigate("https://www.state.gov/press-releases/")
remDr$navigate("https://www.state.gov/press-releases/")
url_biden <- "https://www.state.gov/press-releases/"
#Note that this one follows the format past the first page of https://www.state.gov/press-releases/page/2/
url_trump <- "https://2017-2021.state.gov/press-releases/"
#Same subsequent page format as Biden administration releases
url_cndocs <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3434_664924/index.html"
#Note: This one does index and then index_1; compare Hotel UMass reviews exercise
url_cnactivities <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3435_664926/"
#The subsequent page format for this one is, after the 664926, /index_1.html and so on
shell('docker pull selenium/standalone-firefox')
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
rD <- rsDriver(browser = "chrome", chromever = "114.0.5735.90", port = 8787L)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
#And, as in tutorial, this gets NULL.
install.packages("netstat")
url_biden <- "https://www.state.gov/press-releases/"
#Note that this one follows the format past the first page of https://www.state.gov/press-releases/page/2/
url_trump <- "https://2017-2021.state.gov/press-releases/"
#Same subsequent page format as Biden administration releases
url_cndocs <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3434_664924/index.html"
#Note: This one does index and then index_1; compare Hotel UMass reviews exercise
url_cnactivities <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3435_664926/"
#The subsequent page format for this one is, after the 664926, /index_1.html and so on
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
library(rvest)
library(tidyverse)
library(netstat)
library(RSelenium)
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
library(rvest)
library(tidyverse)
library(netstat)
library(RSelenium)
url_biden <- "https://www.state.gov/press-releases/"
#Note that this one follows the format past the first page of https://www.state.gov/press-releases/page/2/
url_trump <- "https://2017-2021.state.gov/press-releases/"
#Same subsequent page format as Biden administration releases
url_cndocs <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3434_664924/index.html"
#Note: This one does index and then index_1; compare Hotel UMass reviews exercise
url_cnactivities <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3435_664926/"
#The subsequent page format for this one is, after the 664926, /index_1.html and so on
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
remDr$open()
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
library(rvest)
library(tidyverse)
library(netstat)
library(RSelenium)
url_biden <- "https://www.state.gov/press-releases/"
#Note that this one follows the format past the first page of https://www.state.gov/press-releases/page/2/
url_trump <- "https://2017-2021.state.gov/press-releases/"
#Same subsequent page format as Biden administration releases
url_cndocs <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3434_664924/index.html"
#Note: This one does index and then index_1; compare Hotel UMass reviews exercise
url_cnactivities <- "https://www.fmprc.gov.cn/eng/gjhdq_665435/3376_665447/3432_664920/3435_664926/"
#The subsequent page format for this one is, after the 664926, /index_1.html and so on
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
system("taskkill /im java.exe /f")
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$close()
rD <- rsDriver(browser = "firefox", port = free_port(), verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
rD <- rsDriver(browser = "firefox", port = 8787L, verbose = F)
remDr <- rD$client
#10/9/23: So far, going same as in tutorial. 8787 is my lucky number in terms of the port connection, but I'm receiving [1] NA
remDr$navigate("https://www.state.gov/press-releases/")
#And, as in tutorial, this gets NULL.
library(installr)
updateR()
updateR()
q()
library(tidytext)
library(plyr)
library(tidyverse)
library(quanteda)
library(quanteda.textmodels)
library(devtools)
devtools::install_github("kbenoit/quanteda.dictionaries")
library(quanteda.dictionaries)
install.packages("caret")
library(caret)
# large movie review database of 50,000 movie reviews
load(url("https://www.dropbox.com/s/sjdfmx8ggwfda5o/data_corpus_LMRD.rda?dl=1"))
summary(docvars(data_corpus_LMRD))
# set seed
set.seed(12345)
# create id variable in corpus metadata
docvars(data_corpus_LMRD, "id") <- 1:ndoc(data_corpus_LMRD)
# create training set (60% of data) and initial test set
N <- ndoc(data_corpus_LMRD)
trainIndex <- sample(1:N, .6 * N)
testIndex <- c(1:N)[-trainIndex]
# split test set in half (so 20% of data are test, 20% of data are held-out)
N <- length(testIndex)
heldOutIndex <- sample(1:N, .5 * N)
testIndex <- testIndex[-heldOutIndex]
# now apply indices to create subsets and dfms
dfmTrain <- corpus_subset(data_corpus_LMRD, id %in% trainIndex) %>%
tokens() %>%
dfm()
dfmTest <- corpus_subset(data_corpus_LMRD, id %in% testIndex) %>%
tokens() %>% dfm()
dfmHeldOut <- corpus_subset(data_corpus_LMRD, id %in% heldOutIndex) %>% tokens() %>% dfm()
polarity_NaiveBayes <- textmodel_nb(dfmTrain, docvars(dfmTrain, "polarity"), distribution = "Bernoulli")
summary(polarity_NaiveBayes)
dfmTestMatched <- dfm_match(dfmTest, features = featnames(dfmTrain))
dfmTestMatched <- dfm_match(dfmTest, features = featnames(dfmTrain))
install.packages("e1071")
library(e1071)
# create a confusion matrix
actual <- docvars(dfmTestMatched, "polarity")
predicted <- predict(polarity_NaiveBayes, newdata = dfmTestMatched)
confusion <- table(actual, predicted)
# now calculate a number of statistics related to the confusion matrix
confusionMatrix(confusion, mode = "everything")
predicted_prob <- predict(polarity_NaiveBayes, newdata = dfmTestMatched,
type = "probability")
head(predicted_prob)
summary(predicted_prob)
predicted_prob <- predict(polarity_NaiveBayes, newdata = dfmTestMatched,
type = "probability")
head(predicted_prob)
summary(predicted_prob)
# The most positive review
mostPos <- sort.list(predicted_prob[,1], dec = F)[1]
texts(corpus_subset(data_corpus_LMRD, id %in% testIndex))[mostPos]
# the most negative review
mostNeg <- sort.list(predicted_prob[,1], dec = T)[1]
texts(corpus_subset(data_corpus_LMRD, id %in% testIndex))[mostNeg]
# mixed in tone
mixed <- sort.list(abs(predicted_prob[,1] - .5), dec = F)[1]
predicted_prob[mixed,]
texts(corpus_subset(data_corpus_LMRD, id %in% testIndex))[mixed]
# find a review with high confidence
veryPos <- sort.list(predicted_prob[1:2500, 1], dec = F)[1]
predicted_prob[veryPos,]
texts(corpus_subset(data_corpus_LMRD, id %in% testIndex))[veryPos]
# update test set
dfmTestMatchedSmall <- dfm_match(dfmTest, features = featnames(dfmTrainSmall))
# set seed
set.seed(919919)
# sample smaller set of training data
newTrainIndex <- trainIndex[sample(1:length(trainIndex), 2000)]
# create small DFM
dfmTrainSmall <- corpus_subset(data_corpus_LMRD, id %in% newTrainIndex) %>%
tokens(remove_punct = TRUE) %>%
tokens_select(pattern = stopwords("en"), selection = "remove") %>%
dfm()
# trim the dfm down to frequent terms
dfmTrainSmall <- dfm_trim(dfmTrainSmall, min_docfreq = 20, min_termfreq = 20)
dim(dfmTrainSmall)
# run model
polarity_SVM <- textmodel_svm(dfmTrainSmall, docvars(dfmTrainSmall, "polarity"))
# update test set
dfmTestMatchedSmall <- dfm_match(dfmTest, features = featnames(dfmTrainSmall))
# create a confusion matrix
actual <- docvars(dfmTestMatchedSmall, "polarity")
predicted <- predict(polarity_SVM, newdata = dfmTestMatchedSmall)
confusion <- table(actual, predicted)
# now calculate a number of statistics related to the confusion matrix
confusionMatrix(confusion, mode = "everything")
svmCoefs <- as.data.frame(t(coefficients(polarity_SVM)))
svmCoefs <- svmCoefs %>% arrange(V1)
head(svmCoefs, 20)
tail(svmCoefs, 20)
setwd("C:/Users/Matt2/Documents/DACSS/690DV/Lab01")
filename="Names_2010Census.csv"
namedata=read.csv(filename)
namedata$pctwhite <- replace(namedata$pctwhite, namedata$pctwhite == "(S)", 0)
namedata$pctwhite <- as.numeric(namedata$pctwhite)
namedata$pctblack <- replace(namedata$pctblack, namedata$pctblack == "(S)", 0)
namedata$pctblack <- as.numeric(namedata$pctblack)
namedata$pctapi <- replace(namedata$pctapi, namedata$pctapi == "(S)", 0)
namedata$pctapi <- as.numeric(namedata$pctapi)
namedata$pctaian <- replace(namedata$pctaian, namedata$pctaian == "(S)", 0)
namedata$pctaian <- as.numeric(namedata$pctaian)
namedata$pct2prace <- replace(namedata$pct2prace, namedata$pct2prace == "(S)", 0)
namedata$pct2prace <- as.numeric(namedata$pct2prace)
namedata$pcthispanic <- replace(namedata$pcthispanic, namedata$pcthispanic == "(S)", 0)
namedata$pcthispanic <- as.numeric(namedata$pcthispanic)
summary(namedata$pctwhite)
theCuts = c(-0.00001, 10, 25, 50, 75, 100)
theCutsLabels = c("less than 10%", "10 - <25%", "25 - <50%", "50 - <75%", "75 - 100%")
namedata$pctblackgroup = cut(namedata$pctblack,
breaks = theCuts,
labels = theCutsLabels)
table(namedata$pctblackgroup)
namedata2 <- head(namedata, 10)
base= ggplot(data=namedata2)
library(ggplot2)
base= ggplot(data=namedata2, aes(x= name, y = count))
del1Draft= base + geom_bar(fill = "gray", stat = "identity")
del1Draft
#Trying to do it all at once majorly jammed R, so I restricted it to among the 100 most common names
#next up: figure out how to sort x-axis (name) by count and rotate the labels
saveRDS(del1Draft, file = "del1Draft2.rds")
base= ggplot(data=namedata2, aes(x= name, y = count))
del1Draft3= base + geom_bar(fill = "gray", stat = "identity")
del1Draft3 = b1_newGrid+ theme(axis.text.x = element_text(angle = 60))
base= ggplot(data=namedata2, aes(x= name, y = count))
del1Draft3= base + geom_bar(fill = "gray", stat = "identity")
del1Draft3 = delDraft3+ theme(axis.text.x = element_text(angle = 60))
del1Draft3= base + geom_bar(fill = "gray", stat = "identity")
del1Draft3 = delDraft3+ theme(axis.text.x = element_text(angle = 60))
del1Draft3 = del1Draft3 + theme(axis.text.x = element_text(angle = 60))
del1Draft3
save_image("2_29_24_save1.RData")
save_image("2_29_24_save1.RData")
save.image("2_29_24_save1.RData")
base= ggplot(data=namedata2, aes(x= reorder(name, -count), y = count))
del1Draft3= base + geom_bar(fill = "gray", stat = "identity")
del1Draft3 = del1Draft3 + theme(axis.text.x = element_text(angle = 60))
del1Draft3
saveRDS(del1Draft3, file = "del1Draft3.rds")
del2Draft2= base + geom_histogram(aes(x=pctblack))
del2Draft2
base2= ggplot(data=namedata2, aes(x= pctblack))
del2Draft2= base2 + geom_histogram(aes(x=pctblack))
del2Draft2
save.image("2_29_24_save1.RData")
base2= ggplot(data=namedata, aes(x= pctblack))
del2Draft2= base2 + geom_histogram(aes(x=pctblack))
del2Draft2
base2= ggplot(data=namedata, aes(x= pctblack))
del2Draft2= base2 + geom_histogram(binwidth = 10, aes(x=pctblack))
del2Draft2
saveRDS(del2Draft2, file = "del2Draft2.rds")
save.image("2_29_24_save2.RData")
del1Draft3
del2Draft2
base2= ggplot(data=namedata2, aes(x= pctblack))
del2Draft2= base2 + geom_histogram(binwidth = 10, aes(x=pctblack))
del2Draft2
base2= ggplot(data=namedata2, aes(x= pctblack))
del2Draft2= base2 + geom_histogram(binwidth = 5, aes(x=pctblack))
del2Draft2
save.image("2_29_24_save3.RData")
